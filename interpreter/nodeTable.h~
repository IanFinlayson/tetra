/*This program hashes nodes such that we can determine what general actions should be taken given which nodes.
 */

#include <map> //may change this to unordered_map
#include "frontend.hpp"

enum NodeClassification {

	CONDITION,
	CONTROL,
	IMMEDIATE,
	OPERATION,
	STRUCTURE

};

using namespace std;

class NodeTable {
private:

	map<Node*, NodeClassification> nodeChart;

	static NodeTable* instance;
	NodeTable() {
		nodeChart[NODE_FUNCTION_LIST] = STRUCTURE;
		nodeChart[NODE_FUNCTION] = STRUCTURE;
		nodeChart[NODE_FORMAL_PARAM_LIST] = STRUCTURE;
		nodeChart[NODE_FORMAL_PARAM] = IMMEDIATE;
		nodeChart[NODE_STATEMENT] = STRUCTURE;
		nodeChart[NODE_PASS] = STRUCTURE;
		nodeChart[NODE_BREAK] = CONTROL;
		nodeChart[NODE_CONTINUE] = CONTROL;
		nodeChart[NODE_RETURN] = CONTROL;
		nodeChart[NODE_IF] = CONDITION;
		nodeChart[NODE_ELIF] = CONDITION;
		nodeChart[NODE_ELIF_CHAIN] = STRUCTURE;
		nodeChart[NODE_ELIF_CLAUSE] = CONDITION;
		nodeChart[NODE_WHILE] = CONDITION;
		nodeChart[NODE_FOR] = STRUCTURE;
		nodeChart[NODE_PARFOR] = STRUCTURE;
		nodeChart[NODE_PARALLEL] = STRUCTURE;
		nodeChart[NODE_BACKGROUND] = STRUCTURE;
		nodeChart[NODE_LOCK] = STRUCTURE;
		nodeChart[NODE_ASSIGN] = OPERATION;
		nodeChart[NODE_OR] = OPERAITON;
		nodeChart[NODE_AND] = OPERATION;
		nodeChart[NODE_LT] = OPERATION;
		nodeChart[NODE_LTE] = OPERATION;
		nodeChart[NODE_GT] = ;
		nodeChart[NODE_GTE] = ;
		nodeChart[NODE_EQ] = ;
		nodeChart[NODE_NEQ] = ;
		nodeChart[NODE_BITXOR] = ;
		nodeChart[NODE_SHIFTL] = ;
		nodeChart[NODE_SHIFTR] = ;
		nodeChart[NODE_PLUS] = ;
		nodeChart[NODE_MINUS] = ;
		nodeChart[NODE_TIMES] = ;
		nodeChart[NODE_DIVIDE] = ;
		nodeChart[NODE_MODULUS] = ;
		nodeChart[NODE_EXP] = ;
		nodeChart[NODE_NOT] = ;
		nodeChart[NODE_BITNOT] = ;
		nodeChart[NODE_VECREF] = ;
		nodeChart[NODE_INDEX] = ;
		nodeChart[NODE_FUNCALL] = ;
		nodeChart[NODE_ACTUAL_PARAM_LIST] = ;
		nodeChart[NODE_INTVAL] = ;
		nodeChart[NODE_REALVAL] = ;
		nodeChart[NODE_BOOLVAL] = ;
		nodeChart[NODE_STRINGVAL] = ;
		nodeChart[NODE_IDENTIFIER] = ;
		nodeChart[NODE_VECVAL] = ;
	}

public:
	static void initialize() {
		instance = new NodeTable();
	}

	//assumes it has been initialized
	static NodeClassification classifyNode(Node* node) {
		return IMMEDIATE;
	}

};



