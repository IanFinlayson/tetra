def main() int:
        size = 8
        costs = [[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,1,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]
        values = [1 ... 8]
        parallel:
                values[0]=getMin([1,2,3,4,5,6,7,8],[2,1,3,4,5,6,7,8],costs,size)
                values[1]=getMin([2,1,3,4,5,6,7,8],[3,1,2,4,5,6,7,8],costs,size)
                values[2]=getMin([3,1,2,4,5,6,7,8],[4,1,2,3,5,6,7,8],costs,size)
                values[3]=getMin([4,1,2,3,5,6,7,8],[5,1,2,3,4,6,7,8],costs,size)
                values[4]=getMin([5,1,2,3,4,6,7,8],[6,1,2,3,4,5,7,8],costs,size)
                values[5]=getMin([6,1,2,3,4,5,7,8],[7,1,2,3,4,5,6,8],costs,size)
                values[6]=getMin([7,1,2,3,4,5,6,8],[8,1,2,3,4,5,6,7],costs,size)
                values[7]=getMin([8,1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],costs,size)
        min = 9999999
        for x in values:
                if x < min:
                        min = x
        print("Min: ",x,"\n")
        return 0

def getMin(begin [int], end [int], costs[[int]], size int) int:
        ret = getCost(begin,costs,size)
        nextPerm(begin,size)
        while not cmpArray(begin,end,size):
                cand = getCost(begin,costs,size)
                if cand < ret:
                        ret = cand
                nextPerm(begin,size)
        return ret

def getCost(cities [int], costs [[int]], size int) int:
        ret = 0
        index = 0
        while index < size - 1:
                ret += costs[cities[index]-1][cities[index+1]-1]
                index += 1
        ret += costs[cities[size-1]-1][cities[0]-1]
        return ret

#checks that two arrays have the same components
def cmpArray(x [int], y[int], size int) bool:
        z = 0
        while z < size:
                if x[z] != y[z]:
                        return false
                z += 1
        return true

def swap(a int, b int, x [int]):
        #print("a: ",a," b: ",b,"\n")
        #print("swappy:",x,"\n")
        temp = x[a]
        x[a] = x[b]
        x[b] = temp
        #print("swaapyAfter:",x,"\n")

def nextPerm(x [int], size int):
        maxIndex = -1
        looper = 0
        while looper < size - 1:
                if x[looper] < x[looper+1]:
                        maxIndex = looper
                looper += 1
        if maxIndex == -1:
                looper = 0
                while looper < size:
                        x[looper] = looper+1
                        looper += 1
        else:
                max2 = maxIndex
                looper = maxIndex + 1
                while looper < size:
                        if x[looper] > x[maxIndex]:
                                max2 = looper
                        looper += 1
                swap(maxIndex,max2,x)
                back = size-1
                front = maxIndex+1
                while front < back:
                        swap(front,back,x)
                        front+=1
                        back-=1
        #print(x,"\n")
