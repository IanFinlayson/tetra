# A more robust test file to check parsing for new language features
# that were added May 2016 including:
#   1) import and open statements
#   2) declarations without assignment 
#   3) vector ranges that use non-literals as endpoints
#   4) types for task, mutex, tuple, and dictionaries
#   5) lambda expressions 
#   6) functions as arguments and returns

# Tests for #1
import zero
import zeropointone, zeropointtwo,zeropointthree, zeropointfour
open zeropintfive, zeropointsix,zeropointseven, zeropointeight
global twentyfourpointone int
global twentyfourpointtwo {string:int}
global twentyfourpointthree mutex
global twentyfourpointfour bool
global twentyfourpointfive task
global twentyfourpointfive (int,int,int)
global twentyfourpointsix(int,int,int)


def main():
  # Tests for #2 (also includes a bit of testing for #4)
  one as string
  two as int
  three as bool
  four as real
  fivepointone as mutex
  fivepointtwo as task

  five as [string]
  six as [string]
  seven as [int]
  eight as [int]
  nine as [bool]
  ninepointone as [bool]
  ten as [real]
  eleven as [real]
  elevenpointone as [mutex]
  elevenpointtwo as [task]
  twelve as [[real]]
  thirteen as [[real]]

  fourteen as (int)
  fifteen as (int,int)
  sixteen as (int,(int), real, (string,string), [int],{string:int})

  seventeen as [(int, bool, mutex, task)]
  eighteen as [[(int, bool, mutex, task)]]
  nineteen as [()->int]  
  twenty as [(int)->string]  
  twentyone as [ (int,string,bool)->string ]  
  
  twentytwo as {string:int}
  twentythree as { int:(int,string,int)}
  twentyfour as {([int],string):mutex} 

  # Tests for #3
  two = 5
  twentyfive = [0 ... two]
  twentysix = [two ... len(twentyfive)] 
  twentyseven=[len(twentyfive)...len(twentysix)]
  twentyeight = [len(twentyfive) ... 100]

  # Additional tests for #4
  twentynine = {"hi":"bye", "open": "close", "fire" : "ice" }
  lock:
    background thirty:
      thirtyone={1:"hi",2:"bye",3:"sandwich"}
      thirtytwo=(5,"squirrel",thirty)
      thirtythree = (thirtytwo, ["frank","bob"],thirtyone)
  lock thirtythreepointone:
    wait thirty
    print(thirtyone[1])
    thirtyone [1] = "hello"
    thirtyone[2]=thirtytwo[1] 
    thirtyone[3] = thirtythree[1][0]


# Tests for #5 & #6  
def thirtytwo(thirtythree mutex, thirtyfour task, thirtyfive(int) -> int) (int)->int:
  return thirtyfive

def thirtysix() int:
  thirtyseven = thirtytwo(thirtythreepointone, thirty, lambda x int: x)  
